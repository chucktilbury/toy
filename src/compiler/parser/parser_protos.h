/**
 * @file ./out/parser/parser_protos.h
 *
 * This is generated by parser_template_generator. If you edit this file,
 * don't run the generator in this directory. Run it in a different one and
 * then merge the results using a tool like diff.
 *
 * @date Sat Jul 19 18:26:30 2025
 * @author Chuck Tilbury
 *
 */

#ifndef _PARSER_PROTOS_H_
#define _PARSER_PROTOS_H_

#include "ast.h"
#include "parser.h"

#define STATE_START 1000
#define STATE_MATCH 9100
#define STATE_NO_MATCH 9101
#define STATE_ERROR 9102

#ifdef USE_TRACE
#define TRACE_STATE                \
    {                              \
        TRACE("state: %d", state); \
    }                              \
    while(0)
#else
#define TRACE_STATE
#endif

ast_assignment_t* parse_assignment(parser_state_t* pstate);
ast_bool_literal_t* parse_bool_literal(parser_state_t* pstate);
ast_compound_name_t* parse_compound_name(parser_state_t* pstate);
ast_compound_reference_t* parse_compound_reference(parser_state_t* pstate);
ast_compound_reference_element_t* parse_compound_reference_element(parser_state_t* pstate);
ast_data_declaration_t* parse_data_declaration(parser_state_t* pstate);
ast_data_definition_t* parse_data_definition(parser_state_t* pstate);
ast_dict_init_t* parse_dict_init(parser_state_t* pstate);
ast_do_clause_t* parse_do_clause(parser_state_t* pstate);
ast_dss_initializer_t* parse_dss_initializer(parser_state_t* pstate);
ast_dss_initializer_item_t* parse_dss_initializer_item(parser_state_t* pstate);
ast_else_clause_t* parse_else_clause(parser_state_t* pstate);
ast_exit_statement_t* parse_exit_statement(parser_state_t* pstate);
ast_expression_t* parse_expression(parser_state_t* pstate);
ast_expression_list_t* parse_expression_list(parser_state_t* pstate);
ast_final_else_clause_t* parse_final_else_clause(parser_state_t* pstate);
ast_for_clause_t* parse_for_clause(parser_state_t* pstate);
ast_formatted_string_t* parse_formatted_string(parser_state_t* pstate);
ast_function_body_t* parse_function_body(parser_state_t* pstate);
ast_function_body_element_t* parse_function_body_element(parser_state_t* pstate);
ast_function_body_list_t* parse_function_body_list(parser_state_t* pstate);
ast_function_body_prelist_t* parse_function_body_prelist(parser_state_t* pstate);
ast_function_definition_t* parse_function_definition(parser_state_t* pstate);
ast_function_name_t* parse_function_name(parser_state_t* pstate);
ast_function_parameters_t* parse_function_parameters(parser_state_t* pstate);
ast_function_reference_t* parse_function_reference(parser_state_t* pstate);
ast_if_clause_t* parse_if_clause(parser_state_t* pstate);
ast_import_statement_t* parse_import_statement(parser_state_t* pstate);
ast_initializer_t* parse_initializer(parser_state_t* pstate);
ast_list_init_t* parse_list_init(parser_state_t* pstate);
ast_list_reference_t* parse_list_reference(parser_state_t* pstate);
ast_literal_type_name_t* parse_literal_type_name(parser_state_t* pstate);
ast_loop_body_t* parse_loop_body(parser_state_t* pstate);
ast_loop_body_element_t* parse_loop_body_element(parser_state_t* pstate);
ast_loop_body_list_t* parse_loop_body_list(parser_state_t* pstate);
ast_loop_body_prelist_t* parse_loop_body_prelist(parser_state_t* pstate);
ast_primary_expression_t* parse_primary_expression(parser_state_t* pstate);
ast_return_statement_t* parse_return_statement(parser_state_t* pstate);
ast_start_block_t* parse_start_block(parser_state_t* pstate);
ast_struct_definition_t* parse_struct_definition(parser_state_t* pstate);
ast_struct_init_t* parse_struct_init(parser_state_t* pstate);
ast_translation_unit_t* parse_translation_unit(parser_state_t* pstate);
ast_translation_unit_element_t* parse_translation_unit_element(parser_state_t* pstate);
ast_type_name_t* parse_type_name(parser_state_t* pstate);
ast_while_clause_t* parse_while_clause(parser_state_t* pstate);


#endif /* _PARSER_PROTOS_H_ */
