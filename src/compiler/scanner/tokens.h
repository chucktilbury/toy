/**
 * @file ./out/scanner/tokens.h
 *
 * This is generated by parser_template_generator. If you edit this file,
 * don't run the generator in this directory. Run it in a different one and
 * then merge the results using a tool like diff.
 *
 * @date Sat Jul 19 18:26:30 2025
 * @author Chuck Tilbury
 *
 */

#ifndef _TOKENS_H_
#define _TOKENS_H_

#include <stdbool.h>
#include "string_buffer.h"

typedef enum {
    TOK_END_OF_FILE = 256,
    TOK_END_OF_INPUT = 257,
    TOK_ERROR = 258,
    TOK_BANG = 258,
    TOK_BANG_EQUAL = 259,
    TOK_PERCENT = 260,
    TOK_AMP = 261,
    TOK_OPAREN = 262,
    TOK_CPAREN = 263,
    TOK_STAR = 264,
    TOK_PLUS = 265,
    TOK_COMMA = 266,
    TOK_MINUS = 267,
    TOK_DOT = 268,
    TOK_SLASH = 269,
    TOK_COLON = 270,
    TOK_OPBRACE = 271,
    TOK_OPBRACE_EQUAL = 272,
    TOK_EQUAL = 273,
    TOK_EQUAL_EQUAL = 274,
    TOK_CPBRACE = 275,
    TOK_CPBRACE_EQUAL = 276,
    TOK_BREAK = 277,
    TOK_CONTINUE = 278,
    TOK_FLOAT_LITERAL = 279,
    TOK_IDENTIFIER = 280,
    TOK_INLINE = 281,
    TOK_INT_LITERAL = 282,
    TOK_STRING_LITERAL = 283,
    TOK_OSBRACE = 284,
    TOK_CSBRACE = 285,
    TOK_CARET = 286,
    TOK_AND = 287,
    TOK_BOOL = 288,
    TOK_CONST = 289,
    TOK_DICT = 290,
    TOK_DO = 291,
    TOK_ELSE = 292,
    TOK_EQU = 293,
    TOK_EXIT = 294,
    TOK_FALSE = 295,
    TOK_FLOAT = 296,
    TOK_FOR = 297,
    TOK_GT = 298,
    TOK_GTE = 299,
    TOK_IF = 300,
    TOK_IMPORT = 301,
    TOK_IN = 302,
    TOK_INT = 303,
    TOK_LIST = 304,
    TOK_LT = 305,
    TOK_LTE = 306,
    TOK_NEQU = 307,
    TOK_NOT = 308,
    TOK_NOTHING = 309,
    TOK_OR = 310,
    TOK_RETURN = 311,
    TOK_START = 312,
    TOK_STRING = 313,
    TOK_STRUCT = 314,
    TOK_TRUE = 315,
    TOK_WHILE = 316,
    TOK_OCBRACE = 317,
    TOK_BAR = 318,
    TOK_CCBRACE = 319
} token_type_t;

typedef struct _token_t_ {
    token_type_t type;
    string_t* str;
    string_t* fname;
    int line_no;
    int col_no;
    struct _token_t_* next;
} token_t;

token_t* create_token(string_t* str, token_type_t type);
void destroy_token(token_t* tok);
const char* tok_type_to_str(token_t* tok);

void init_token_queue(void);
void destroy_token_queue(void);
void add_token_queue(token_t* tok);
void* mark_token_queue(void);
void restore_token_queue(void* mark);
void consume_token_queue(void);

token_t* get_token(void);
bool expect_token(token_type_t type);
token_t* consume_token(void);

#endif /* _TOKENS_H_ */
