/**
 * @file ./out/ast/ast_protos.h
 *
 * This is generated by parser_template_generator. If you edit this file,
 * don't run the generator in this directory. Run it in a different one and
 * then merge the results using a tool like diff.
 *
 * @date Sat Jul 19 18:26:30 2025
 * @author Chuck Tilbury
 *
 */

#ifndef _AST_PROTOS_H_
#define _AST_PROTOS_H_

#include "ast.h"

void traverse_assignment(ast_assignment_t* node);
void traverse_bool_literal(ast_bool_literal_t* node);
void traverse_compound_name(ast_compound_name_t* node);
void traverse_compound_reference(ast_compound_reference_t* node);
void traverse_compound_reference_element(ast_compound_reference_element_t* node);
void traverse_data_declaration(ast_data_declaration_t* node);
void traverse_data_definition(ast_data_definition_t* node);
void traverse_dict_init(ast_dict_init_t* node);
void traverse_do_clause(ast_do_clause_t* node);
void traverse_dss_initializer(ast_dss_initializer_t* node);
void traverse_dss_initializer_item(ast_dss_initializer_item_t* node);
void traverse_else_clause(ast_else_clause_t* node);
void traverse_exit_statement(ast_exit_statement_t* node);
void traverse_expression(ast_expression_t* node);
void traverse_expression_list(ast_expression_list_t* node);
void traverse_final_else_clause(ast_final_else_clause_t* node);
void traverse_for_clause(ast_for_clause_t* node);
void traverse_formatted_string(ast_formatted_string_t* node);
void traverse_function_body(ast_function_body_t* node);
void traverse_function_body_element(ast_function_body_element_t* node);
void traverse_function_body_list(ast_function_body_list_t* node);
void traverse_function_body_prelist(ast_function_body_prelist_t* node);
void traverse_function_definition(ast_function_definition_t* node);
void traverse_function_name(ast_function_name_t* node);
void traverse_function_parameters(ast_function_parameters_t* node);
void traverse_function_reference(ast_function_reference_t* node);
void traverse_if_clause(ast_if_clause_t* node);
void traverse_import_statement(ast_import_statement_t* node);
void traverse_initializer(ast_initializer_t* node);
void traverse_list_init(ast_list_init_t* node);
void traverse_list_reference(ast_list_reference_t* node);
void traverse_literal_type_name(ast_literal_type_name_t* node);
void traverse_loop_body(ast_loop_body_t* node);
void traverse_loop_body_element(ast_loop_body_element_t* node);
void traverse_loop_body_list(ast_loop_body_list_t* node);
void traverse_loop_body_prelist(ast_loop_body_prelist_t* node);
void traverse_primary_expression(ast_primary_expression_t* node);
void traverse_return_statement(ast_return_statement_t* node);
void traverse_start_block(ast_start_block_t* node);
void traverse_struct_definition(ast_struct_definition_t* node);
void traverse_struct_init(ast_struct_init_t* node);
void traverse_translation_unit(ast_translation_unit_t* node);
void traverse_translation_unit_element(ast_translation_unit_element_t* node);
void traverse_type_name(ast_type_name_t* node);
void traverse_while_clause(ast_while_clause_t* node);


#endif /* _AST_PROTOS_H_ */
